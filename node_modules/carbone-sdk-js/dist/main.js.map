{
  "version": 3,
  "sources": ["../src/main.js"],
  "sourcesContent": ["\n\n/**\n * @description Carbone Cloud SDK Constructor, the access token must be passed as first argument.\n *\n * @param {String} accessToken\n */\nconst carboneSDK = function (accessToken) {\n\n  const _config = {\n    apiUrl: \"https://api.carbone.io\",\n    accessToken: accessToken,\n    apiVersion: 4,\n    apiHeaders: {}\n  };\n\n  /** Private function for requests */\n  /**\n   *\n   * @param {String} method post/get/delete\n   * @param {String} path API endpoint\n   * @param {Object} options { body, headers }\n   * @returns\n   */\n  const request = function (method, path, options) {\n    return fetch(`${_config.apiUrl}${path}`, {\n      method: method,\n      ...(options?.body ? { body: options.body } : {}),\n      headers: {\n        \"carbone-version\": _config.apiVersion,\n        Authorization: \"Bearer \" + _config.accessToken,\n        ...(options?.headers ? options.headers : {}),\n        ...(_config?.apiHeaders ? _config.apiHeaders : {})\n      },\n    });\n  }\n\n  return {\n    /**\n     * Set custom API headers\n     *\n     * @param {Object} headers Example: { \"carbone-template-delete-after\": \"86400\", \"carbone-webhook-url\": \"https://...\" }\n     */\n    setApiHeaders: function (headers) {\n      if (headers && typeof headers === \"object\") {\n        _config.apiHeaders = headers;\n      }\n    },\n    /**\n     * Get Custom API headers\n     *\n     * @returns {Object} headers\n     */\n    getApiHeaders: function () {\n      return _config.apiHeaders;\n    },\n    /**\n     * @returns {String} Return the access token\n     */\n    getAccessToken: function () {\n      return _config.accessToken;\n    },\n    /**\n     * @param {String} newToken Set a new access token\n     */\n    setAccessToken: function (newToken) {\n      _config.accessToken = newToken;\n    },\n    /**\n     * @returns {String|Number} Return the Carbone API version\n     */\n    getApiVersion: function () {\n      return _config.apiVersion;\n    },\n    /**\n     * @param {String|Number} version Set the Carbone API version\n     */\n    setApiVersion: function (version) {\n      _config.apiVersion = version;\n    },\n    /**\n     * @returns {String} Return the Carbone API URL\n     */\n    getApiUrl: function () {\n      return _config.apiUrl;\n    },\n    /**\n     * @param {String} url Set the Carbone API URL\n     */\n    setApiUrl: function (url) {\n      _config.apiUrl = url;\n    },\n    /**\n     * @description Add a template asynchronously to the Carbone Render API\n     * @param {File|Blob|String} file File from a form or Blob\n     * @param {String} payload Payload to get a different template ID\n     * @returns {Promise<Object>} A templateId is return otherwise an error\n     */\n    addTemplate: async function (file, payload = \"\") {\n      var form = new FormData();\n      if (!file) {\n        throw new Error(\n          \"Carbone SDK addTemplate error: the file argument is not valid.\"\n        );\n      }\n      form.append(\"payload\", payload);\n      form.append(\"template\", file);\n      const response = await request(\"post\", \"/template\", { body: form });\n      return await response.json();\n    },\n    /**\n     * @description Delete a template asynchronously\n     * @param {String} templateId\n     * @returns {Promise<Object>} Object response with a success or error message.\n     */\n    deleteTemplate: async function (templateId) {\n      if (!templateId) {\n        throw new Error(\n          \"Carbone SDK deleteTemplate error: the templateId argument is not valid.\"\n        );\n      }\n      const response = await request(\"delete\", `/template/${templateId}`);\n      return await response.json();\n    },\n    /**\n     * @description Return a template asynchronously as a blob from a templateId.\n     * @param {String} templateId\n     * @param {String} responseType It can be a \"blob\" or \"text\". Blob by default.\n     * @returns {Promise<Blob|String>} The template as a Blob or Text.\n     */\n    getTemplate: async function (templateId, responseType = \"blob\") {\n      if (!templateId) {\n        throw new Error(\n          \"Carbone SDK getTemplate error: the templateId argument is not valid.\"\n        );\n      }\n      if ([\"blob\", \"text\"].indexOf(responseType) === -1) {\n        throw new Error(\n          \"Carbone SDK getTemplate error: the responseType argument is not valid.\"\n        );\n      }\n      const response = await request(\"get\", `/template/${templateId}`);\n      return await response[responseType]();\n    },\n    /**\n     * @description Render a report asynchronously from a templateID and return a renderId\n     * @param {String} templateId\n     * @param {Object} data the dataset\n     * @returns {Promise<Object>} Return the API response with a renderId. If something went wrong, it returns an error.\n     */\n    renderReport: async function (templateId, data) {\n      if (!templateId) {\n        throw new Error(\n          \"Carbone SDK renderReport error: the templateId argument is not valid.\"\n        );\n      }\n      if (!data) {\n        throw new Error(\n          \"Carbone SDK renderReport error: the data argument is not valid.\"\n        );\n      }\n      const response = await request(\"post\", `/render/${templateId}`, { body: JSON.stringify(data), headers: { \"Content-type\": \"application/json\" } });\n      return await response.json();\n    },\n    /**\n     * @description Return a report as a Blob asynchronously from renderId.\n     * @param {String} renderId\n     * @param {String} responseType It can be a \"blob\" or \"text\". Blob by default.\n     * @returns {Promise<{content: Blob|String, name: String}>} A object {content, name} where content is the report as a Blob by default and name is a unique report name as a string.\n     */\n    getReport: async function (renderId, responseType = \"blob\") {\n      if (!renderId) {\n        throw new Error(\n          \"Carbone SDK getReport error: the renderId argument is not valid.\"\n        );\n      }\n      if ([\"blob\", \"text\"].indexOf(responseType) === -1) {\n        throw new Error(\n          \"Carbone SDK getReport error: the responseType argument is not valid.\"\n        );\n      }\n      const response = await request(\"get\", `/render/${renderId}`);\n      return {\n        content: await response[responseType](),\n        name: this.getReportNameFromHeader(response.headers),\n      };\n    },\n    /**\n     * @description The render function can be use to render reports\n     * @description 1 - If it receive a template ID, try to render the report\n     * @description 2 - if it is a File or Blob and the template has already been uploaded: it generates the templateID locally from the content and try render from the template id\n     * @description 3 - if it is a File or Blob and the template has not been uploaded: it uploads the template and render the report.\n     *\n     * @param {Blob|File|String} templateIdOrFile Template ID (refering to a template already uploaded) or File/Blob template to upload\n     * @param {Object} data dataset\n     * @param {String} payload payload to get a different template Id\n     * @param {String} responseType It can be a \"blob\" or \"text\". Blob by default.\n     * @returns {Promise<{content: Blob|String, name: String}>} The report as a Blob or Text and it's name.\n     */\n    render: async function (\n      templateIdOrFile,\n      data,\n      payload = \"\",\n      responseType = \"blob\"\n    ) {\n      if (!templateIdOrFile) {\n        throw new Error(\n          \"Carbone SDK render error: the templateId argument is not valid.\"\n        );\n      }\n      if (!data) {\n        throw new Error(\n          \"Carbone SDK render error: the data argument is not valid.\"\n        );\n      }\n      let _renderResponse = null;\n      // 1 - if template ID, try to render the report, if return false, try 2\n      if (\n        typeof templateIdOrFile === \"string\" &&\n        templateIdOrFile.length === 64 &&\n        Object.prototype.hasOwnProperty.call(templateIdOrFile, \"name\") === false\n      ) {\n        _renderResponse = await this.renderReport(templateIdOrFile, data);\n      }  else {\n        // 2 - If the template if a File/Blob: Generate the templateID from the content and render from the template id, if success false else try solution 3\n        // if templateIdOrFile is a File or Blob, convert to uint8array - todo: test the uint8array conversion with JSDOM+JEST\n        const _fileContentBuffer = await (typeof templateIdOrFile === \"string\"\n          ? templateIdOrFile\n          : await templateIdOrFile\n              .arrayBuffer()\n              .then((resp) => new Uint8Array(resp)));\n        const _templateId = await this.generateTemplateId(\n          _fileContentBuffer,\n          payload\n        );\n        if (_templateId) {\n          _renderResponse = await this.renderReport(_templateId, data);\n        }\n        if (_renderResponse === null || _renderResponse.success === false) {\n          // 3 - add the template, and render\n          const _response = await this.addTemplate(templateIdOrFile, payload);\n          if (\n            _response?.success === true &&\n            _response.data.templateId\n          ) {\n            _renderResponse = await this.renderReport(\n              _response.data.templateId,\n              data\n            );\n          } else {\n            throw new Error(\"Carbone Upload Template To Generate Document Error: \" + _response?.error);\n          }\n        }\n      }\n      if (\n        !_renderResponse ||\n        _renderResponse.success === false ||\n        !_renderResponse.data.renderId\n      ) {\n        throw new Error(\"Carbone Generate Document Error: \" + _renderResponse?.error);\n      }\n      return this.getReport(_renderResponse.data.renderId, responseType);\n    },\n    /**\n     * @description Generate the template ID from the content pass as parameters.\n     *\n     * @param {Buffer|Uint8Array|String} fileContent\n     * @param {Buffer|Uint8Array|String} payload\n     * @returns {String} The template ID\n     */\n    generateTemplateId: async function (fileContent, payload = \"\") {\n      function arrayBufferToHexa(buffer) {\n        var digest = \"\";\n        var view = new DataView(buffer);\n        for (var i = 0; i < view.byteLength; i += 4) {\n          // We use getUint32 to reduce the number of iterations (notice the `i += 4`)\n          var value = view.getUint32(i);\n          // toString(16) will transform the integer into the corresponding hex string\n          // but will remove any initial \"0\"\n          var stringValue = value.toString(16);\n          // One Uint32 element is 4 bytes or 8 hex chars (it would also work with 4\n          // chars for Uint16 and 2 chars for Uint8)\n          var padding = \"00000000\";\n          var paddedValue = (padding + stringValue).slice(-padding.length);\n          digest += paddedValue;\n        }\n        return digest;\n      }\n      // if string, convert to uint8array, else object === Blob or File\n      var bufferContent =\n        typeof fileContent === \"string\"\n          ? new TextEncoder(\"utf-8\").encode(fileContent)\n          : fileContent;\n      var bufferPayload =\n        typeof payload === \"string\"\n          ? new TextEncoder(\"utf-8\").encode(payload)\n          : payload;\n      // Merge payload and file content\n      var mergedArray = new Uint8Array(\n        bufferPayload.length + bufferContent.length\n      );\n      mergedArray.set(bufferPayload);\n      mergedArray.set(bufferContent, bufferPayload.length);\n      return await crypto.subtle\n        .digest(\"SHA-256\", mergedArray)\n        .then(function (hash) {\n          return arrayBufferToHexa(hash);\n        });\n    },\n    /**\n     * @description Parse an retrieve the final unique report name in the \"content-disposition\" header during a \"getReport\" request.\n     * @param {Object} headers headers from a fetch request\n     * @returns {String} The report name\n     */\n    getReportNameFromHeader(headers) {\n      if (!headers) {\n        return null;\n      }\n      const _contentHeader = headers.get(\"content-disposition\");\n      if (!_contentHeader) {\n        return null;\n      }\n      let splitted = _contentHeader.split(\"=\");\n      if (splitted.length === 1 || !splitted[1]) {\n        return null;\n      }\n      let _reportName = splitted[1];\n      if (\n        _reportName[0] === '\"' &&\n        _reportName[_reportName.length - 1] === '\"'\n      ) {\n        _reportName = _reportName.substr(1, splitted[1].length - 2);\n      }\n      return _reportName;\n    },\n  };\n};\n\n/** Compatibility v1 */\nif(typeof window !== 'undefined') {\n  window.carboneRenderSDK = carboneSDK;\n  window.carboneSDK = carboneSDK;\n}\nexport default carboneSDK;\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "main_default", "__toCommonJS", "carboneSDK", "accessToken", "_config", "request", "method", "path", "options", "__spreadProps", "__spreadValues", "headers", "newToken", "version", "url", "file", "payload", "form", "templateId", "responseType", "data", "renderId", "response", "templateIdOrFile", "_renderResponse", "_fileContentBuffer", "resp", "_templateId", "_response", "fileContent", "arrayBufferToHexa", "buffer", "digest", "view", "i", "value", "stringValue", "padding", "paddedValue", "bufferContent", "bufferPayload", "mergedArray", "hash", "_contentHeader", "splitted", "_reportName", "main_default"]
}
